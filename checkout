Restrictions
You must create the ConfigMap object before you reference it in a Pod specification. Alternatively, mark the ConfigMap reference as optional in the Pod spec (see Optional ConfigMaps). If you reference a ConfigMap that doesn't exist and you don't mark the reference as optional, the Pod won't start. Similarly, references to keys that don't exist in the ConfigMap will also prevent the Pod from starting, unless you mark the key references as optional.
If you use envFrom to define environment variables from ConfigMaps, keys that are considered invalid will be skipped. The pod will be allowed to start, but the invalid names will be recorded in the event log (InvalidVariableNames). The log message lists each skipped key. For example:
kubectl get events

The output is similar to this:
LASTSEEN FIRSTSEEN COUNT NAME          KIND  SUBOBJECT  TYPE      REASON                            SOURCE                MESSAGE
0s       0s        1     dapi-test-pod Pod              Warning   InvalidEnvironmentVariableNames   {kubelet, 127.0.0.1}  Keys [1badkey, 2alsobad] from the EnvFrom configMap default/myconfig were skipped since they are considered invalid environment variable names.

ConfigMaps reside in a specific Namespace. Pods can only refer to ConfigMaps that are in the same namespace as the Pod.
You can't use ConfigMaps for static pods, because the kubelet does not support this.
Cleaning up
Delete the ConfigMaps and Pods that you made:
kubectl delete configmaps/game-config configmaps/game-config-2 configmaps/game-config-3 \               configmaps/game-config-env-file
kubectl delete pod dapi-test-pod --now
# You might already have removed the next set
kubectl delete configmaps/special-config configmaps/env-config
kubectl delete configmap -l 'game-config in (config-4,config-5)’
If you created a directory configure-pod-container and no longer need it, you should remove that too, or move it into the trash can / deleted files location.


Creation of Configmaps

This is a reference guide documented for the Demonstration on Creation and usage of Config-maps inside the Kubernetes Cluster

Creating and Viewing Config-maps Inside a Kubernetes Cluster –
Step 1 –Creating a directory

To start creating config-maps connect to the master ec2 instance via SSH as the root user.You need to first create a directory for storing config-maps and the relevant files which can be done by the command –

mkdir <directory-name>
e.g mkdir configmaps (Here configmaps is the name of the directory)

After creating the directory browse inside the directory by giving the command–
cd directory-name

Step 2–Creating files to be used for config-maps creation–
In this context to create the config-maps you will be creating 2 plaintext files with some sample data, in actual scenario config-maps can be created with 1 or more files containing the relevant configuration of the required environment and need not be only plaintext files.Command to create the 2 files for this demo –

echo -n 'Welcome to File 1 for Config Map Creation' > test_file_1.txt
echo -n 'Welcome to File 2 for Config Map Creation' > test_file_2.txt

Above commands creates two files ‘test_file_1.txt’ and ‘test_file_2.txt’ with the sample data provided.

Step 3– Creating the configmap–

Now you can create the configmap using the 2 files created in the previous step by giving the below command–

kubectl create configmap demo-configmap --from-file=test_file_1.txt --from-file=test_file_2.txt

Command Syntax –
kubectl create configmap <configmap-name> --from-file=<file-path/file-name>
You can verify that the configmap got created by giving the below command –
kubectl get configmaps

This will display the configmaps created with the name provided during creation.

Step 4–Viewing the configmap –You can output the contents of the configmap by providing the below command –
kubectl get configmaps demo-configmap -o yaml

Command Syntax –
kubectl get configmaps <configmap-name> -o yaml

This will display the contents and details of the configmap mentioned.

Creating a Pod and consuming the configmap created –
Step 1–
Creating Pod Manifest file –

You will need to create a Pod Manifest file (.yaml file) using which a nginx Pod application will be deployed and inside the manifest file you need to configure the Pod to use the configmap created. 
The manifest file will have the below specifications –
#nginx-pod-demo-configmap.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-demo-configmap
spec:
  containers:
  - name: nginx-container
    image: nginx
    volumeMounts:
    - name: test-vol
      mountPath: /etc/config-map-data
      readOnly: true
  volumes:
    - name: test-vol
      configMap:
        name: demo-configmap
        items:
        - key: test_file_1.txt
          path: test_file_1.txt
        - key: test_file_2.txt
          path: test_file_2.txt

You need to create a YAML file with the above content. In the ConfigMap section highlighted you need to mention the name of the config that was created in the earlier steps. Mount Path is the location inside the Pod where the configmap will be stored.
 Here the name of the YAML file to be created is nginx-pod-demo-configmap.yaml

Step 2 – Deploying the Pod –
After creating the manifest file, the Pod can be deployed by giving the below command –
kubectl create -f nginx-pod-demo-configmap.yaml
Command Syntax–
kubectl create -f <pod manifest file name/path>
Step 3 –Validating the configmap inside the Pod –
You can validate whether the Pod got successfully created with the configmap that was created in the earlier steps by giving the below command –
kubectl exec nginx-pod-demo-configmap -- cat /etc/config-map-data/test_file_1.txt
Command Syntax –
kubectl exec <podname> -- cat <mountPath>/<filename>
Cleaning up the cluster by removing the configmaps and Pods created–
If you need to delete the configmaps created or the Pods deployed then the below commands can be used to perform the clean-up.
kubectl delete configmaps <config-map-name>
kubectl delete pods <pod-name>



